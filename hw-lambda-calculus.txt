## Daniel Homan
## 15515323

## PART ONE

kons = lambda a d z . z false a d
kar = lambda p . p (lambda n a d . a)
kdr = lambda p . p (lambda n a d . d)
null = lambda z . z true false false
null? = lambda p . p (lambda n a d . n)
true = lambda a b . a
false = lambda a b . b


i)	kar (kons e1 e2) ↝ e1
		 - start with taking kons first
		 kons = (λ a d z . z false a d) e1 e2
		 			= (λ d z . z false e1 d) e2
					= (λ z . z false e1 e2)

		- substitute into kar
		kar = (λ p . p (λ n a d . a)) (λ z . z false e1 e2)
				= (λ z . z false e1 e2) (λ n a d . a)
				= (λ a d . a) e1 e2
				= (λ d . e1) e2
		- since a := e1 and a is returned, our solution is e1

ii)	kdr (kons e1 e2) ↝ e2
		- start with (kons e1 e2) first -> using above kons
		kons e1 e2 = (λ z . z false e1 e2)

		- substitute into kdr
		kdr(λ z . z false e1 e2) =>
				= (λ p . p (λ n a d . d)) (λ z . z false e1 e2)
				= (λ z . z false e1 e2) (λ n a d . d)
				= (λ n a d . d) false e1 e2
				= (λ a d . d) e1 e2
				- can't substitute e1 for a
				= (λ d . d) e2
				= (λ d . d)
				= e2


iii)	null? (kons e1 e2) ↝  false
			- start with (kons e1 e2) first -> using about kons
			kons e1 e2 = (λ z . z false e1 e2)

			- substitute into null?
			null?(λ z . z false e1 e2) =>
				= (λ p . p (λ n a d . n)) (λ z . z false e1 e2)
				= (λ z . z false e1 e2) (λ n a d . n)
				= (λ n a d . n) false e1 e2
				- n := false and false is returned this false is the output
				=> (λ false a d . false) e1 e2 => false


iv)	null? null ↝ true
			=> (λ p . p (λ n a d . n)) (λ z . z true false false)
			= (λ z . z true false false)(λ n a d . n)
			=	(λ n a d . n) (true false false)
			- since n := true and n is returned the output is true
			=> (λ true a d . true) false false = true

## PART TWO

	(λ c . (λ a . (λ d . (λ h . (h (d (a (a (λ z y . y))) (d (a (a (λ f x . x))) (a (a (a (λ z x . x)))))) (h (a (a (λ z y . y))) (a (a (a (λ z x . x))))))) (λ n m . n (d m) (λ z y . y))) (λ n m . n a m)) (λ n z . c (n z) z)) (λ z g x . z (g x))

	(λ c .
	  (λ a .
	    (λ d .
	      (λ h . (h (d (a (a (λ z y . y)))
	                    (d (a (a (λ f x . x)))
	                        (a (a (a (λ z x . x))))))
	                (h (a (a (λ z y . y)))
	                    (a (a (a (λ z x . x)))))))
	      (λ n m . n (d m) (λ z y . y)))
	    (λ n m . n a m))
	  (λ n z . c (n z) z))
	(λ z g x . z (g x))

	# renaming for false values
	(λ c .
	  (λ a .
	    (λ d .
	      (λ h . (h (d (a (a ((FALSE))))
	                    (d (a (a ((FALSE))))
	                        (a (a (a ((FALSE)))))))
	                (h (a (a ((FALSE))))
	                    (a (a (a ((FALSE))))))))
	      (λ n m . n (d m) ((FALSE))))
	    (λ n m . n a m))
	  (λ n z . c (n z) z))
	(λ k g x . k (g x))

	# substitute (λ n z . c (n z) z) for lambda c - can't substitute c
	(λ a .
	  (λ d .
	    (λ h . (h (d (a (a (FALSE)))
	                  (d (a (a (FALSE)))
	                      (a (a (a (FALSE))))))
	              (h (a (a (FALSE)))
	                  (a (a (a (FALSE)))))))
	    (λ n m . n (d m) (FALSE)))
	  (λ n m . n a m))
	(λ k g x . k (g x))

	# rename the values for true
	(λ a .
	  (λ d .
	    (λ h . (h (d (a (a (FALSE)))
	                  (d (a (a (FALSE)))
	                      (a (a (a (FALSE))))))
	              (h (a (a (FALSE)))
	                  (a (a (a (FALSE)))))))
	    (TRUE (d m) (FALSE)))
	  (TRUE a m))
	(λ k g x . k (g x))

	# substitute for a with (TRUE a m) (reduction)
	(λ d .
	  (λ h . (h (d ((TRUE a m)  ((TRUE a m)  (FALSE)))
	                (d ((TRUE a m)  ((TRUE a m)  (FALSE)))
	                    ((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))
	            (h ((TRUE a m)  ((TRUE a m)  (FALSE)))
	                ((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE)))))))
	  (TRUE (d m) (FALSE)))
	(λ k g x . k (g x))

	# substitute (TRUE (d m) (FALSE)) for lambda d (reduction)
	(λ h . (h ((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))
	              ((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))
	                  ((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))
	          (h ((TRUE a m)  ((TRUE a m)  (FALSE)))
	              ((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE)))))))

	# substitute (λ k g x . k (g x)) for h
	((λ k g x . k (g x)) ((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))((λ k g x . k (g x)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))

	# substitute (g x) for lambda k (reduction)
	(λ g x . (g x)) ((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))((λ k g x . k (g x)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))))

	# substitute ((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE (d m) (FALSE)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE)))))) for lambda g (reduction)
	(λ x . (g x))((λ k g x . k (g x)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE)))))

	# substitute ((λ k g x . k (g x)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))) for lambda x (reduction)
	(g x)
